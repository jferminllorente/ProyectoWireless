%==========================================================================
%           Decodificador de código de repetición de orden n             |¦
%                                 JFL                                    |¦
%==========================================================================
%           y = repDeco(x,n,M,Asignacion_coords)                         |¦
%   x   --> Secuencia de simbolos codificada.                            |¦
%   n   --> Cantidad de veces que se repite cada bit.                    |¦
%   M   --> Nro. de simbolos de la constelación utilizada.               |¦
%   Asignacion_coords   --> Coordenadas de cada simbolo.                 |¦
%                                                                        |¦
%   y   --> Secuencia decodificada (en formato fila).                    |¦
%==========================================================================
function y = repDeco(x,n,M,Asignacion_coords)
    
    dim = size(x);
    if(dim(1)>1)
        x = x.';
    end
    aux = reshape(x,n,[]);
    dist_eu = zeros(M,length(x)/n);
    switch (M)
        case 2
            de_0 = sum(abs(aux-Asignacion_coords(1)).^2);
            de_1 = sum(abs(aux-Asignacion_coords(2)).^2);
            y = double(de_1<de_0)*Asignacion_coords(2) + double(de_1>=de_0)*Asignacion_coords(1);
        case 4
            for i=1:M
                dist_eu(i,:) = sum(abs(aux-Asignacion_coords(i)).^2);
            end
            [~,dec_simb_index] = min(dist_eu);
            y = (dec_simb_index == 1)*Asignacion_coords(1) + ...
                (dec_simb_index == 2)*Asignacion_coords(2) + ...
                (dec_simb_index == 3)*Asignacion_coords(3) + ...
                (dec_simb_index == 4)*Asignacion_coords(4);
        otherwise
            for i=1:M
                dist_eu(i,:) = sum(abs(aux-Asignacion_coords(i)).^2);
            end
            [~,dec_simb_index] = min(dist_eu);
            y = (dec_simb_index == 1)*Asignacion_coords(1) + ...
                (dec_simb_index == 2)*Asignacion_coords(2) + ...
                (dec_simb_index == 3)*Asignacion_coords(3) + ...
                (dec_simb_index == 4)*Asignacion_coords(4) + ...
                (dec_simb_index == 5)*Asignacion_coords(5) + ...
                (dec_simb_index == 6)*Asignacion_coords(6) + ...
                (dec_simb_index == 7)*Asignacion_coords(7) + ...
                (dec_simb_index == 8)*Asignacion_coords(8) + ...
                (dec_simb_index == 9)*Asignacion_coords(9) + ...
                (dec_simb_index == 10)*Asignacion_coords(10) + ...
                (dec_simb_index == 11)*Asignacion_coords(11) + ...
                (dec_simb_index == 12)*Asignacion_coords(12) + ...
                (dec_simb_index == 13)*Asignacion_coords(13) + ...
                (dec_simb_index == 14)*Asignacion_coords(14) + ...
                (dec_simb_index == 15)*Asignacion_coords(15) + ...
                (dec_simb_index == 16)*Asignacion_coords(16);
    end
end